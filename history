;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by `savehist'.

(setq savehist-minibuffer-history-variables '(read-expression-history tmm--history face-name-history history shell-command-history input-method-history yes-or-no-p-history search-ring extended-command-history buffer-name-history file-name-history minibuffer-history))
(setq tmm--history '("d==>Describe Package             ?" "h==>Help                         h" "e==>Execute Actions              x" "o==>Mark Obsolete Packages       ~" "r==>Refresh Package List         r" "P==>Update Package List          g" "f==>Filter Package List...       f" "0==>Mark Upgradable Packages     U" "M==>Mark for Install             i" "m==>Mark for Deletion            d" "U==>Unmark Backwards           DEL" "u==>Unmark                       u" "p==>Previous                     p" "n==>Next                         n" "q==>Quit                         q" "d==>Describe Package             ?" "h==>Help                         h" "e==>Execute Actions              x" "o==>Mark Obsolete Packages       ~" "r==>Refresh Package List         r" "P==>Update Package List          g" "f==>Filter Package List...       f" "0==>Mark Upgradable Packages     U" "M==>Mark for Install             i" "m==>Mark for Deletion            d" "U==>Unmark Backwards           DEL" "u==>Unmark                       u" "p==>Previous                     p" "n==>Next                         n" "q==>Quit                         q" "d==>Describe Package             ?" "h==>Help                         h" "e==>Execute Actions              x" "o==>Mark Obsolete Packages       ~" "r==>Refresh Package List         r" "P==>Update Package List          g" "f==>Filter Package List...       f" "0==>Mark Upgradable Packages     U" "M==>Mark for Install             i" "m==>Mark for Deletion            d" "U==>Unmark Backwards           DEL" "u==>Unmark                       u" "p==>Previous                     p" "n==>Next                         n" "q==>Quit                         q" "d==>Describe Package             ?" "h==>Help                         h" "e==>Execute Actions              x" "o==>Mark Obsolete Packages       ~" "r==>Refresh Package List         r" "P==>Update Package List          g" "f==>Filter Package List...       f" "0==>Mark Upgradable Packages     U" "M==>Mark for Install             i" "m==>Mark for Deletion            d" "U==>Unmark Backwards           DEL" "u==>Unmark                       u" "p==>Previous                     p" "n==>Next                         n" "q==>Quit                         q"))
(setq yes-or-no-p-history '("yes" " yes" "yes" "no" "yes" "no" "yes" "nio" "yes" "no" "yes" "YES" "no" "n" "yes" "y" "yes" "y" "yes" "no" "yes" "y" "yes"))
(setq search-ring '(".emacs" "ibuffer" "django" ".emacs" "tramp" "emmet" "reac" "web-mode" "hosts" "installe" "jedi" "solarized" "sloarized" "cms" "tree" "jedi"))
(setq extended-command-history '("comment-region" "list-packages" "web-mode" "list-buffers" "split-window-vertically" "list-buffers" "find-file" "list-packages" "web-mode" "find-file" "list-buffers" "list-packages" "save-buffer" "list-buffers" "describe-mode" "list-buffers" "save-buffer" "web-mode" "recover-this-file" "list-packages" "customize-themes" "customize" "package-install" "list-packages" "customize-themes" "list-packages" "customize" "neotree-toggle" "recover-this-file" "list-packages" "eval-buffer" "load-file" "find-file" "kill-buffer" "window-configuration-to-register" "delete-window" "list-packages" "delete-window" "close-rectangle" "package-refresh-contents" "list-packages" "customize-face" "customize-themes" "list-packages" "customize-group" "list-packages" "customize-themes" "list-packages" "customize-group" "list-packages" "customize-group" "list-packages" "xml-format" "xml-mode" "xml-format" "speedbar" "list-packages" "load-file"))
(setq buffer-name-history '("hosts" "*GNU Emacs*" "public" "*Help*" "*Packages*" "*Buffer List*" "index.html" "*Packages*" "init.el" "*Packages*" "*Help*" "*Packages*" "*Compile-Log*" "*Help*" "*Packages*" ".emacs" "*Packages*" "*Custom Themes*" "*Help*" "*Packages*" "*GNU Emacs*" "*scratch*" ".emacs" "*scratch*" "*GNU Emacs*" "*scratch*" "authentication_schema.sql" "*scratch*" "sasl_passwd" "#.emacs#" ".emacs"))
(setq file-name-history '("~/.emacs" "~/Downloads/test.html" "~/.emacs" "~/" "~/Downloads/test.html" "/etc/hosts" "~/.emacs" "~/Downloads/react-example/react-tutorial/test.html" "~/Downloads/react-example/react-tutorial/" "~/.emacs" "~/Downloads/react-example/index.html" "~/.emacs" "~/Downloads/react-example/react-tutorial/index.html" "~/Downloads/react-example/react-tutorial/" "/etc/hosts" "~/" "~/.emacs.d" "~/.emacs" "~/" "~/.emacs" "~/" "user-init-file" "~/.emacs" "" "~/" "~/.emacs" "~/" "~/envs/" "~/code/cms/serialbox/www/" "~/" "~/code/sprout-development/getting_started/apps/todos_one/" "~/code/sprout-development/getting_started/apps/todos_one/resources/" "~" "/" "~/code/citadel-development/" "/" "/System/Library/LaunchDaemons/org.postfix.master.plist" "/etc/postfix/sasl_passwd" "~/code/rmagee-development/yuda/" "" "~/citadel/yuda/mail-test.py" "~/citadel/yuda/" "~/envs/django_1_6/" "~/" "~/citadel/yuda/" "~/" "~/.emacs.d/" "~/.emacs"))
(setq minibuffer-history '("34" "jedi-direx" "user-init-file" "robertmagee" "package" "157" "36" "384" "76" "50"))
(setq kill-ring '(#("(global-linum-mode 1)
(load \"~/.emacs.d/emacs24-ssh-conf.el\")
(defun xml-format ()
  (interactive)
  (save-excursion
    (shell-command-on-region (mark) (point) \"xmllint --format -\" (buffer-name) t)
  )
)
(require 'mouse)
(xterm-mouse-mode t)
(defun track-mouse (e)) 
(setq mouse-sel-mode t)
(savehist-mode 1)
(setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
(require 'package)
(add-to-list 'package-archives
  '(\"melpa\" . \"http://melpa.milkbox.net/packages/\") t)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (solarized-dark)))
 '(custom-safe-themes
   (quote
    (\"a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0\" \"d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879\" \"8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4\" default))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(require 'web-mode)
(add-to-list 'auto-mode-alist '(\"\\\\.phtml\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.tpl\\\\.php\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.[agj]sp\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.as[cp]x\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.erb\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.mustache\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.djhtml\\\\'\" . web-mode))
(add-to-list 'auto-mode-alist '(\"\\\\.html?\\\\'\" . web-mode))

(defadvice find-file (after find-file-sudo activate)
  \"Find file as root if necessary.\"
  (unless (and buffer-file-name
               (file-writable-p buffer-file-name))
    (find-alternate-file (concat \"/sudo:root@localhost:\" buffer-file-name))))
" 0 28 (fontified t) 28 60 (fontified t face font-lock-string-face) 60 63 (fontified t) 63 68 (fontified t face font-lock-keyword-face) 68 69 (fontified t) 69 79 (fontified t face font-lock-function-name-face) 79 102 (fontified t) 102 116 (fontified t face font-lock-keyword-face) 116 161 (fontified t) 161 181 (fontified t face font-lock-string-face) 181 206 (fontified t) 206 213 (fontified t face font-lock-keyword-face) 213 215 (fontified t) 215 220 (fontified t face font-lock-constant-face) 220 244 (fontified t) 244 249 (fontified t face font-lock-keyword-face) 249 250 (fontified t) 250 261 (fontified t face font-lock-function-name-face) 261 392 (fontified t) 392 399 (fontified t face font-lock-keyword-face) 399 401 (fontified t) 401 408 (fontified t face font-lock-constant-face) 408 445 (fontified t) 445 452 (fontified t face font-lock-string-face) 452 455 (fontified t) 455 491 (fontified t face font-lock-string-face) 491 518 (fontified t) 518 519 (fontified t) 519 522 (fontified t face font-lock-comment-delimiter-face) 522 564 (fontified t face font-lock-comment-face) 564 565 (fontified t) 565 568 (fontified t face font-lock-comment-delimiter-face) 568 629 (fontified t face font-lock-comment-face) 629 630 (fontified t) 630 633 (fontified t face font-lock-comment-delimiter-face) 633 687 (fontified t face font-lock-comment-face) 687 688 (fontified t) 688 691 (fontified t face font-lock-comment-delimiter-face) 691 741 (fontified t face font-lock-comment-face) 741 829 (fontified t) 829 895 (fontified t face font-lock-string-face) 895 896 (fontified t) 896 962 (fontified t face font-lock-string-face) 962 963 (fontified t) 963 1029 (fontified t face font-lock-string-face) 1029 1042 (fontified t) 1042 1061 (fontified t) 1061 1064 (fontified t face font-lock-comment-delimiter-face) 1064 1102 (fontified t face font-lock-comment-face) 1102 1103 (fontified t) 1103 1106 (fontified t face font-lock-comment-delimiter-face) 1106 1167 (fontified t face font-lock-comment-face) 1167 1168 (fontified t) 1168 1171 (fontified t face font-lock-comment-delimiter-face) 1171 1225 (fontified t face font-lock-comment-face) 1225 1226 (fontified t) 1226 1229 (fontified t face font-lock-comment-delimiter-face) 1229 1279 (fontified t face font-lock-comment-face) 1279 1283 (fontified t) 1283 1290 (fontified t face font-lock-keyword-face) 1290 1292 (fontified t) 1292 1300 (fontified t face font-lock-constant-face) 1300 1334 (fontified t) 1334 1347 (fontified t face font-lock-string-face) 1347 1393 (fontified t) 1393 1410 (fontified t face font-lock-string-face) 1410 1456 (fontified t) 1456 1471 (fontified t face font-lock-string-face) 1471 1517 (fontified t) 1517 1532 (fontified t face font-lock-string-face) 1532 1546 (fontified t) 1546 1578 (fontified t) 1578 1589 (fontified t face font-lock-string-face) 1589 1635 (fontified t) 1635 1651 (fontified t face font-lock-string-face) 1651 1697 (fontified t) 1697 1711 (fontified t face font-lock-string-face) 1711 1757 (fontified t) 1757 1770 (fontified t face font-lock-string-face) 1770 1786 (fontified t) 1786 1795 (fontified t face font-lock-keyword-face) 1795 1796 (fontified t) 1796 1805 (fontified t face font-lock-function-name-face) 1805 1840 (fontified t) 1840 1873 (fontified t face font-lock-doc-face) 1873 1877 (fontified t) 1877 1883 (fontified t face font-lock-keyword-face) 1883 1990 (fontified t) 1990 2013 (fontified t face font-lock-string-face) 2013 2035 (fontified t)) #("M-x " 0 4 (face minibuffer-prompt read-only t field t rear-nonsticky t front-sticky t)) #("(add-to-list 'auto-mode-alist '(\"\\\\.html?\\\\'\" . web-mode))" 0 32 (fontified t) 32 45 (face font-lock-string-face fontified t) 45 58 (fontified t)) "(defadvice ido-find-file (after find-file-sudo activate)
  \"Find file as root if necessary.\"
  (unless (and buffer-file-name
               (file-writable-p buffer-file-name))
    (find-alternate-file (concat \"/sudo:root@localhost:\" buffer-file-name))))" #("emacs-xkcd         1.0           available  marmalade  View xkcd from Emacs
  emacsagist         20140331.1130 available  melpa      Search Packagist.org packages without leaving Emacs
  emacsc             20150807.257  available  melpa      helper for emacsc(1)
  emacsd-tile        0.1           available  marmalade  tiling windows for emacs
  emacsql            20151003.1931 available  melpa      high-level SQL database front-end
  emacsql-mysql      20151004.715  available  melpa      EmacSQL back-end for MySQL
  emacsql-psql       20151004.715  available  melpa      EmacSQL back-end for PostgreSQL via psql and pg
  emacsql-sqlite     20151004.715  available  melpa      EmacSQL back-end for SQLite
  emacsshot          20150516.1433 available  melpa      Snapshot a frame or window from within Emacs
  emagician-fix-s... 20141229.1434 available  melpa      Simple hack into ispell to fix (muscle) memory problems
  emamux             0.1           available  marmalade  Interact with tmux
  emamux             20141028.503  available  melpa      Interact with tmux
  emamux-ruby-test   20130812.939  available  melpa      Ruby test with emamux
  ember-mode         20150808.820  available  melpa      Ember navigation mode for emacs
  ember-yasnippets   20150501.926  available  melpa      Snippets for Ember.js development
" 0 10 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] follow-link t face link category default-button button (t)) 10 11 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Package") 11 19 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Package" display (space :align-to 21)) 19 22 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Version" help-echo #("Version: 1.0" 9 12 (font-lock-face default)) font-lock-face default) 22 23 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Version") 23 33 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Version" display (space :align-to 35)) 33 42 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 42 43 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Status") 43 44 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Status" display (space :align-to 46)) 44 53 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Archive" help-echo #("Archive: marmalade" 9 18 (font-lock-face default)) font-lock-face default) 53 54 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Archive") 54 55 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 55 75 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] tabulated-list-column-name "Description" help-echo #("Description: View xkcd from Emacs" 13 33 (font-lock-face default)) font-lock-face default) 75 76 (tabulated-list-entry [("emacs-xkcd" face link follow-link t package-desc [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil] action package-menu-describe-package) #("1.0" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("View xkcd from Emacs" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacs-xkcd (1 0) "View xkcd from Emacs" ((json (1 4))) single "marmalade" nil nil nil]) 76 78 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil]) 78 88 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] follow-link t face link category default-button button (t)) 88 89 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Package") 89 97 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 97 110 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20140331.1130" 9 22 (font-lock-face default)) font-lock-face default) 110 111 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Version") 111 120 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 120 121 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Status") 121 122 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 122 127 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 127 128 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Archive") 128 133 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 133 184 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] tabulated-list-column-name "Description" help-echo #("Description: Search Packagist.org packages without leaving Emacs" 13 64 (font-lock-face default)) font-lock-face default) 184 185 (tabulated-list-entry [("emacsagist" face link follow-link t package-desc [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil] action package-menu-describe-package) #("20140331.1130" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Search Packagist.org packages without leaving Emacs" 0 51 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsagist (20140331 1130) "Search Packagist.org packages without leaving Emacs" ((cl-lib (0 5))) single "melpa" nil ((:url . "http://github.com/echosa/emacsagist") (:keywords "tools")) nil]) 185 187 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil]) 187 193 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] follow-link t face link category default-button button (t)) 193 194 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Package") 194 206 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 206 218 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20150807.257" 9 21 (font-lock-face default)) font-lock-face default) 218 219 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Version") 219 220 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Version" display (space :align-to 35)) 220 229 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 229 230 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Status") 230 231 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 231 236 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 236 237 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Archive") 237 242 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 242 262 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] tabulated-list-column-name "Description" help-echo #("Description: helper for emacsc(1)" 13 33 (font-lock-face default)) font-lock-face default) 262 263 (tabulated-list-entry [("emacsc" face link follow-link t package-desc [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil] action package-menu-describe-package) #("20150807.257" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("helper for emacsc(1)" 0 20 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsc (20150807 257) "helper for emacsc(1)" nil tar "melpa" nil ((:url . "https://github.com/knu/emacsc") (:keywords "tools")) nil]) 263 265 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil]) 265 276 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] follow-link t face link category default-button button (t)) 276 277 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Package") 277 284 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Package" display (space :align-to 21)) 284 287 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Version" help-echo #("Version: 0.1" 9 12 (font-lock-face default)) font-lock-face default) 287 288 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Version") 288 298 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Version" display (space :align-to 35)) 298 307 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 307 308 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Status") 308 309 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Status" display (space :align-to 46)) 309 318 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Archive" help-echo #("Archive: marmalade" 9 18 (font-lock-face default)) font-lock-face default) 318 319 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Archive") 319 320 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 320 344 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] tabulated-list-column-name "Description" help-echo #("Description: tiling windows for emacs" 13 37 (font-lock-face default)) font-lock-face default) 344 345 (tabulated-list-entry [("emacsd-tile" face link follow-link t package-desc [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("tiling windows for emacs" 0 24 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsd-tile (0 1) "tiling windows for emacs" nil single "marmalade" nil nil nil]) 345 347 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil]) 347 354 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] follow-link t face link category default-button button (t)) 354 355 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package") 355 366 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 366 379 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20151003.1931" 9 22 (font-lock-face default)) font-lock-face default) 379 380 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version") 380 389 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 389 390 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status") 390 391 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 391 396 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 396 397 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive") 397 402 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 402 435 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Description" help-echo #("Description: high-level SQL database front-end" 13 46 (font-lock-face default)) font-lock-face default) 435 436 (tabulated-list-entry [("emacsql" face link follow-link t package-desc [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151003.1931" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("high-level SQL database front-end" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql (20151003 1931) "high-level SQL database front-end" ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil]) 436 438 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil]) 438 451 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] follow-link t face link category default-button button (t)) 451 452 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package") 452 457 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 457 469 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20151004.715" 9 21 (font-lock-face default)) font-lock-face default) 469 470 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version") 470 471 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version" display (space :align-to 35)) 471 480 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 480 481 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status") 481 482 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 482 487 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 487 488 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive") 488 493 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 493 519 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Description" help-echo #("Description: EmacSQL back-end for MySQL" 13 39 (font-lock-face default)) font-lock-face default) 519 520 (tabulated-list-entry [("emacsql-mysql" face link follow-link t package-desc [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for MySQL" 0 26 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-mysql (20151004 715) "EmacSQL back-end for MySQL" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) single "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil]) 520 522 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil]) 522 534 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] follow-link t face link category default-button button (t)) 534 535 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package") 535 541 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 541 553 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20151004.715" 9 21 (font-lock-face default)) font-lock-face default) 553 554 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version") 554 555 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version" display (space :align-to 35)) 555 564 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 564 565 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status") 565 566 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 566 571 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 571 572 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive") 572 577 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 577 624 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Description" help-echo #("Description: EmacSQL back-end for PostgreSQL via psql and pg" 13 60 (font-lock-face default)) font-lock-face default) 624 625 (tabulated-list-entry [("emacsql-psql" face link follow-link t package-desc [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for PostgreSQL via psql and pg" 0 47 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-psql (20151004 715) "EmacSQL back-end for PostgreSQL via psql and pg" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil]) 625 627 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil]) 627 641 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] follow-link t face link category default-button button (t)) 641 642 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package") 642 646 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 646 658 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20151004.715" 9 21 (font-lock-face default)) font-lock-face default) 658 659 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version") 659 660 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Version" display (space :align-to 35)) 660 669 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 669 670 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status") 670 671 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 671 676 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 676 677 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive") 677 682 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 682 709 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] tabulated-list-column-name "Description" help-echo #("Description: EmacSQL back-end for SQLite" 13 40 (font-lock-face default)) font-lock-face default) 709 710 (tabulated-list-entry [("emacsql-sqlite" face link follow-link t package-desc [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil] action package-menu-describe-package) #("20151004.715" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("EmacSQL back-end for SQLite" 0 27 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsql-sqlite (20151004 715) "EmacSQL back-end for SQLite" ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) tar "melpa" nil ((:url . "https://github.com/skeeto/emacsql")) nil]) 710 712 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil]) 712 721 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] follow-link t face link category default-button button (t)) 721 722 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Package") 722 731 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 731 744 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20150516.1433" 9 22 (font-lock-face default)) font-lock-face default) 744 745 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Version") 745 754 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 754 755 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Status") 755 756 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 756 761 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 761 762 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Archive") 762 767 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 767 811 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] tabulated-list-column-name "Description" help-echo #("Description: Snapshot a frame or window from within Emacs" 13 57 (font-lock-face default)) font-lock-face default) 811 812 (tabulated-list-entry [("emacsshot" face link follow-link t package-desc [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil] action package-menu-describe-package) #("20150516.1433" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snapshot a frame or window from within Emacs" 0 44 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emacsshot (20150516 1433) "Snapshot a frame or window from within Emacs" nil single "melpa" nil ((:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience")) nil]) 812 814 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil]) 814 832 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] follow-link t face link category default-button button (t)) 832 833 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Package") 833 846 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20141229.1434" 9 22 (font-lock-face default)) font-lock-face default) 846 847 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Version") 847 856 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 856 857 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Status") 857 858 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 858 863 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 863 864 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Archive") 864 869 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 869 924 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] tabulated-list-column-name "Description" help-echo #("Description: Simple hack into ispell to fix (muscle) memory problems" 13 68 (font-lock-face default)) font-lock-face default) 924 925 (tabulated-list-entry [("emagician-fix-spell-memory" face link follow-link t package-desc [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil] action package-menu-describe-package) #("20141229.1434" 0 13 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Simple hack into ispell to fix (muscle) memory problems" 0 55 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emagician-fix-spell-memory (20141229 1434) "Simple hack into ispell to fix (muscle) memory problems" nil single "melpa" nil ((:keywords "erc" "bitlbee" "bot")) nil]) 925 927 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil]) 927 933 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] follow-link t face link category default-button button (t)) 933 934 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Package") 934 946 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Package" display (space :align-to 21)) 946 949 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Version" help-echo #("Version: 0.1" 9 12 (font-lock-face default)) font-lock-face default) 949 950 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Version") 950 960 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Version" display (space :align-to 35)) 960 969 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 969 970 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Status") 970 971 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Status" display (space :align-to 46)) 971 980 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Archive" help-echo #("Archive: marmalade" 9 18 (font-lock-face default)) font-lock-face default) 980 981 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Archive") 981 982 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 982 1000 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] tabulated-list-column-name "Description" help-echo #("Description: Interact with tmux" 13 31 (font-lock-face default)) font-lock-face default) 1000 1001 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil] action package-menu-describe-package) #("0.1" 0 3 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("marmalade" 0 9 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (0 1) "Interact with tmux" nil single "marmalade" nil nil nil]) 1001 1003 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil]) 1003 1009 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] follow-link t face link category default-button button (t)) 1009 1010 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Package") 1010 1022 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 1022 1034 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20141028.503" 9 21 (font-lock-face default)) font-lock-face default) 1034 1035 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Version") 1035 1036 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Version" display (space :align-to 35)) 1036 1045 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 1045 1046 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Status") 1046 1047 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 1047 1052 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 1052 1053 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Archive") 1053 1058 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 1058 1076 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] tabulated-list-column-name "Description" help-echo #("Description: Interact with tmux" 13 31 (font-lock-face default)) font-lock-face default) 1076 1077 (tabulated-list-entry [("emamux" face link follow-link t package-desc [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil] action package-menu-describe-package) #("20141028.503" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Interact with tmux" 0 18 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux (20141028 503) "Interact with tmux" ((emacs (24)) (cl-lib (0 5))) single "melpa" nil ((:url . "https://github.com/syohex/emacs-emamux")) nil]) 1077 1079 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil]) 1079 1095 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] follow-link t face link category default-button button (t)) 1095 1096 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Package") 1096 1098 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 1098 1110 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20130812.939" 9 21 (font-lock-face default)) font-lock-face default) 1110 1111 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Version") 1111 1112 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Version" display (space :align-to 35)) 1112 1121 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 1121 1122 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Status") 1122 1123 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 1123 1128 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 1128 1129 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Archive") 1129 1134 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 1134 1155 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] tabulated-list-column-name "Description" help-echo #("Description: Ruby test with emamux" 13 34 (font-lock-face default)) font-lock-face default) 1155 1156 (tabulated-list-entry [("emamux-ruby-test" face link follow-link t package-desc [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil] action package-menu-describe-package) #("20130812.939" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ruby test with emamux" 0 21 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc emamux-ruby-test (20130812 939) "Ruby test with emamux" ((emamux (0 1)) (projectile (0 9 1))) single "melpa" nil ((:url . "https://github.com/syohex/emamux-ruby-test")) nil]) 1156 1158 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil]) 1158 1168 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] follow-link t face link category default-button button (t)) 1168 1169 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Package") 1169 1177 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 1177 1189 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20150808.820" 9 21 (font-lock-face default)) font-lock-face default) 1189 1190 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Version") 1190 1191 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Version" display (space :align-to 35)) 1191 1200 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 1200 1201 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Status") 1201 1202 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 1202 1207 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 1207 1208 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Archive") 1208 1213 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 1213 1244 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] tabulated-list-column-name "Description" help-echo #("Description: Ember navigation mode for emacs" 13 44 (font-lock-face default)) font-lock-face default) 1244 1245 (tabulated-list-entry [("ember-mode" face link follow-link t package-desc [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil] action package-menu-describe-package) #("20150808.820" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Ember navigation mode for emacs" 0 31 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-mode (20150808 820) "Ember navigation mode for emacs" ((cl-lib (0 5))) single "melpa" nil ((:keywords "ember" "ember.js" "emberjs")) nil]) 1245 1247 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil]) 1247 1263 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Package" action package-menu-describe-package package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] follow-link t face link category default-button button (t)) 1263 1264 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Package") 1264 1266 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Package" display (space :align-to 21)) 1266 1278 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Version" help-echo #("Version: 20150501.926" 9 21 (font-lock-face default)) font-lock-face default) 1278 1279 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Version") 1279 1280 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Version" display (space :align-to 35)) 1280 1289 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face default)) font-lock-face default) 1289 1290 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Status") 1290 1291 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Status" display (space :align-to 46)) 1291 1296 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Archive" help-echo #("Archive: melpa" 9 14 (font-lock-face default)) font-lock-face default) 1296 1297 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Archive") 1297 1302 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Archive" display (space :align-to 57)) 1302 1335 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] tabulated-list-column-name "Description" help-echo #("Description: Snippets for Ember.js development" 13 46 (font-lock-face default)) font-lock-face default) 1335 1336 (tabulated-list-entry [("ember-yasnippets" face link follow-link t package-desc [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil] action package-menu-describe-package) #("20150501.926" 0 12 (font-lock-face default)) #("available" 0 9 (font-lock-face default)) #("melpa" 0 5 (font-lock-face default)) #("Snippets for Ember.js development" 0 33 (font-lock-face default))] tabulated-list-id [cl-struct-package-desc ember-yasnippets (20150501 926) "Snippets for Ember.js development" ((yasnippet (0 8 0))) tar "melpa" nil ((:keywords "tools" "abbrev" "languages")) nil])) #("    <!-- <script type=\"text/babel\" src=\"scripts/example.js\"></script> -->" 0 4 (fontified t) 4 5 (syntax-table (2097163) fontified t face font-lock-comment-delimiter-face) 5 9 (fontified t face font-lock-comment-delimiter-face) 9 10 (fontified t face font-lock-comment-face) 10 16 (fontified t face font-lock-comment-face) 16 17 (fontified t face font-lock-comment-face) 17 21 (fontified t face font-lock-comment-face) 21 22 (fontified t face font-lock-comment-face) 22 23 (syntax-table (1) fontified t face font-lock-comment-face) 23 33 (fontified t face font-lock-comment-face) 33 34 (syntax-table (1) fontified t face font-lock-comment-face) 34 35 (fontified t face font-lock-comment-face) 35 38 (fontified t face font-lock-comment-face) 38 39 (fontified t face font-lock-comment-face) 39 40 (syntax-table (1) fontified t face font-lock-comment-face) 40 58 (fontified t face font-lock-comment-face) 58 59 (syntax-table (1) fontified t face font-lock-comment-face) 59 62 (fontified t face font-lock-comment-face) 62 68 (fontified t face font-lock-comment-face) 68 69 (fontified t face font-lock-comment-face) 69 70 (fontified t face font-lock-comment-face) 70 72 (fontified t face font-lock-comment-delimiter-face) 72 73 (syntax-table (2097164) fontified t face font-lock-comment-delimiter-face)) #("
    </script>
    
    <!--script type=\"text/babel\" src=\"scripts/example.js\"></script-->
    <script type=\"text/babel\">
    // To get started with this tutorial running your own code, simply remove
      // the script tag loading scripts/example.js and start writing cod" 0 1 (part-side javascript fontified t) 1 5 (fontified t) 5 6 (tag-beg 20 tag-type end tag-name "script" font-lock-face web-mode-html-tag-bracket-face fontified t) 6 7 (tag-type end tag-name "script" font-lock-face web-mode-html-tag-bracket-face fontified t) 7 13 (tag-type end tag-name "script" font-lock-face web-mode-html-tag-face fontified t) 13 14 (tag-end t tag-type end tag-name "script" font-lock-face web-mode-html-tag-bracket-face fontified t) 14 15 (invisible nil fontified t) 15 17 (invisible nil fontified t) 17 19 (invisible nil fontified t) 19 20 (invisible nil fontified t) 20 24 (invisible nil fontified t) 24 25 (font-lock-face web-mode-comment-face tag-beg 16 tag-type comment invisible nil fontified t) 25 28 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 28 29 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 29 33 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 33 34 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 34 35 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 35 39 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 39 40 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 40 41 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 41 51 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 51 52 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 52 53 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 53 56 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 56 57 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 57 58 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 58 76 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 76 77 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 77 78 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 78 79 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 79 80 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 80 88 (font-lock-face web-mode-comment-face tag-type comment invisible nil fontified t) 88 89 (font-lock-face web-mode-comment-face tag-end t tag-type comment invisible nil fontified t) 89 90 (invisible nil fontified t) 90 94 (invisible nil fontified t) 94 95 (invisible nil font-lock-face web-mode-html-tag-bracket-face tag-beg 17 tag-type start tag-name "script" fontified t) 95 101 (invisible nil font-lock-face web-mode-html-tag-face tag-type start tag-name "script" fontified t) 101 102 (invisible nil tag-type start tag-name "script" fontified t) 102 106 (invisible nil font-lock-face web-mode-html-attr-name-face tag-attr 0 tag-type start tag-name "script" fontified t) 106 107 (invisible nil font-lock-face web-mode-html-attr-equal-face tag-attr 0 tag-type start tag-name "script" fontified t) 107 108 (invisible nil font-lock-face web-mode-html-attr-value-face tag-attr 0 tag-type start tag-name "script" fontified t) 108 118 (invisible nil font-lock-face web-mode-html-attr-value-face tag-attr 0 tag-type start tag-name "script" fontified t) 118 119 (invisible nil font-lock-face web-mode-html-attr-value-face tag-attr-end 4 tag-attr 0 tag-type start tag-name "script" fontified t) 119 120 (invisible nil font-lock-face web-mode-html-tag-bracket-face tag-end t tag-type start tag-name "script" fontified t) 120 121 (invisible nil fontified t) 121 125 (invisible nil part-side javascript fontified t) 125 143 (invisible nil font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript fontified t) 143 147 (invisible nil font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript fontified t) 147 148 (invisible nil font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript fontified t) 148 152 (invisible nil font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript fontified t) 152 198 (invisible nil font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript fontified t) 198 205 (invisible nil part-side javascript fontified t) 205 271 (invisible nil font-lock-face web-mode-javascript-comment-face part-token comment part-side javascript fontified t)) #("(defun cleanup-buffer (" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 21 (face font-lock-function-name-face fontified t) 21 23 (fontified t)) "" "" "" #("#192.168.1.100 citadel-auth-server" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 14 (face font-lock-comment-face fontified t) 14 34 (face font-lock-comment-face fontified t)) #("192.168.1.100 systechcitadel" 0 13 (face font-lock-variable-name-face fontified t) 13 28 (fontified t)) #("192.168.1.100 systechcitadel
" 0 13 (face font-lock-variable-name-face fontified t) 13 28 (fontified t) 28 29 (fontified t)) #("host robmagee.com
 HostName robmagee.com
  IdentityFile ~/.ssh/robmagee.com.rsa
   User git
" 0 18 (fontified t) 18 41 (fontified t) 41 80 (fontified t) 80 91 (fontified t) 91 92 (fontified t)) #("host robmagee.com
 HostName robmagee.com
  IdentityFile ~/.ssh/robmagee.com.rsa
   User git
" 0 18 (fontified t) 18 41 (fontified t) 41 80 (fontified t) 80 91 (fontified t) 91 92 (fontified t)) "52.21.214.106 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/4Bg1OwemjdZwogOIammVZJQ05rK63NbTIPN3o0lQrvvSpHvN/bty9o/twR/lzsOUoO+O+mAuQ2CZULtMGh9CT+7rUOTKK1eiJhsMQ0UpLVZTP6KmhO+k+BufWk2FJ9J075hjGz5f8jQe4UXSz4y1ETWIyuOseyUndPqfujk6sYK8MP00GlLQURzerGJcx2Jpeb8yOcr8MXNKXBmvE7uQPA50KGzKz71TU9NNM+N2wnuiMoE5b6N1gPhBwJVOnV+78tt3KFk7Ymi5CoP0i3pl4LSPpUctGqHab+HQDsAw/Cy/O8lcWAVHcs/Y+0Zc14QKD+2ThzEHbJoQU3PrTBu5" #("127.0.0.1	epcis.apostrophesystems.com" 0 9 (fontified t face font-lock-variable-name-face) 9 37 (fontified t)) #("127.0.0.1	citadel.systech-tips.com" 0 9 (fontified t face font-lock-variable-name-face) 9 34 (fontified t)) "~/.emacs.d/elpa/jedi-20150623.2335el" "" "" #("5x5                             built-in   simple little puzzle game
  ada-mode                        built-in   major-mode for editing Ada sources
" 0 3 (button (t) category default-button face link follow-link t package-symbol 5x5 action package-menu-describe-package tabulated-list-column-name "Package" tabulated-list-id (5x5) tabulated-list-entry [("5x5" face link follow-link t package-symbol 5x5 action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("simple little puzzle game" 0 25 (font-lock-face font-lock-builtin-face))]) 3 4 (tabulated-list-column-name "Package" tabulated-list-id (5x5) tabulated-list-entry [("5x5" face link follow-link t package-symbol 5x5 action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("simple little puzzle game" 0 25 (font-lock-face font-lock-builtin-face))]) 4 19 (display (space :align-to 21) tabulated-list-column-name "Package" tabulated-list-id (5x5) tabulated-list-entry [("5x5" face link follow-link t package-symbol 5x5 action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("simple little puzzle game" 0 25 (font-lock-face font-lock-builtin-face))]) 19 20 (tabulated-list-column-name "Version" tabulated-list-id (5x5) tabulated-list-entry [("5x5" face link follow-link t package-symbol 5x5 action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("simple little puzzle game" 0 25 (font-lock-face font-lock-builtin-face))]) 20 32 (display (space :align-to 34) tabulated-list-column-name "Version" tabulated-list-id (5x5) tabulated-list-entry [("5x5" face link follow-link t package-symbol 5x5 action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("simple little puzzle game" 0 25 (font-lock-face font-lock-builtin-face))]) 32 40 (font-lock-face font-lock-builtin-face help-echo #("Status: built-in" 8 16 (font-lock-face font-lock-builtin-face)) tabulated-list-column-name "Status" tabulated-list-id (5x5) tabulated-list-entry [("5x5" face link follow-link t package-symbol 5x5 action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("simple little puzzle game" 0 25 (font-lock-face font-lock-builtin-face))]) 40 41 (tabulated-list-column-name "Status" tabulated-list-id (5x5) tabulated-list-entry [("5x5" face link follow-link t package-symbol 5x5 action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("simple little puzzle game" 0 25 (font-lock-face font-lock-builtin-face))]) 41 43 (display (space :align-to 45) tabulated-list-column-name "Status" tabulated-list-id (5x5) tabulated-list-entry [("5x5" face link follow-link t package-symbol 5x5 action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("simple little puzzle game" 0 25 (font-lock-face font-lock-builtin-face))]) 43 68 (font-lock-face font-lock-builtin-face help-echo #("Description: simple little puzzle game" 13 38 (font-lock-face font-lock-builtin-face)) tabulated-list-column-name "Description" tabulated-list-id (5x5) tabulated-list-entry [("5x5" face link follow-link t package-symbol 5x5 action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("simple little puzzle game" 0 25 (font-lock-face font-lock-builtin-face))]) 68 69 (tabulated-list-id (5x5) tabulated-list-entry [("5x5" face link follow-link t package-symbol 5x5 action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("simple little puzzle game" 0 25 (font-lock-face font-lock-builtin-face))]) 69 71 (tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))]) 71 79 (button (t) category default-button face link follow-link t package-symbol ada-mode action package-menu-describe-package tabulated-list-column-name "Package" tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))]) 79 80 (tabulated-list-column-name "Package" tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))]) 80 90 (display (space :align-to 21) tabulated-list-column-name "Package" tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))]) 90 91 (tabulated-list-column-name "Version" tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))]) 91 103 (display (space :align-to 34) tabulated-list-column-name "Version" tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))]) 103 111 (font-lock-face font-lock-builtin-face help-echo #("Status: built-in" 8 16 (font-lock-face font-lock-builtin-face)) tabulated-list-column-name "Status" tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))]) 111 112 (tabulated-list-column-name "Status" tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))]) 112 114 (display (space :align-to 45) tabulated-list-column-name "Status" tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))]) 114 148 (font-lock-face font-lock-builtin-face help-echo #("Description: major-mode for editing Ada sources" 13 47 (font-lock-face font-lock-builtin-face)) tabulated-list-column-name "Description" tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))]) 148 149 (tabulated-list-id (ada-mode) tabulated-list-entry [("ada-mode" face link follow-link t package-symbol ada-mode action package-menu-describe-package) "" #("built-in" 0 8 (font-lock-face font-lock-builtin-face)) #("major-mode for editing Ada sources" 0 34 (font-lock-face font-lock-builtin-face))])) "" "export PYTHONPATH=$PYTHONPATH:/Users/robertmagee/codeGITHUB-django-axe/
" "export OLD_PYTHONPATH=\"$PYTHONPATH\"
export PYTHONPATH=\"/Users/robertmagee/code/django/\"
export PYTHONPATH=$PYTHONPATH:/Users/robertmagee/code/GITHUB-django-axes/" #("/fingerprint/api/non-serial-verification/;" 0 41 (fontified t) 41 42 (face font-lock-comment-delimiter-face fontified t)) "         location /fingerprint/api/non-serial-verification {
		# proxy / requests to apache running django on port 8081
		proxy_pass         http://127.0.0.1:8081/fingerprint/api/non-serial-verification/;
		proxy_redirect     off;
		proxy_set_header   Host             $host;
		proxy_set_header   X-Real-IP        $remote_addr;
		proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
		proxy_max_temp_file_size 0;

		client_max_body_size       50m;
		client_body_buffer_size    128k;

		proxy_connect_timeout      90;
		proxy_send_timeout         90;
		proxy_read_timeout         90;

		proxy_buffer_size          4k;
		proxy_buffers              4 32k;
		proxy_busy_buffers_size    64k;
		proxy_temp_file_write_size 64k;
         }" #("python manage.py" 0 16 (fontified t)) "export PYTHONPATH=\"/Users/robertmagee/code/django\"" "export PYTHONPATH=\"/Users/robertmagee/code/django\"

" #("[4/23/15, 3:50:44 PM] Loic Duros: (,)

" 0 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t)) #("[4/23/15, 4:10:02 PM] Taulant: reset_migrations () {" 0 52 (fontified t)) #("TodosTwo.mainPage = SC.Page.design({" 0 36 (fontified t)) #("192.168.1.100 citadel-auth-server" 0 13 (fontified t face font-lock-comment-face) 13 33 (fontified t face font-lock-comment-face)) #("192.168.1.100 systechcitadel" 0 13 (fontified t face font-lock-variable-name-face) 13 28 (fontified t)) "
export OLD_PYTHONPATH=\"$PYTHONPATH\"
export PYTHONPATH=\"/Users/robertmagee/code/django\"" #("STATICFILES" 0 11 (fontified t)) "export PYTHONPATH=\"$OLD_PYTHONPATH\"" "corden-sept-11.ck0n2p4efqbw.us-east-1.rds.amazonaws.com:3306" "corden.ck0n2p4efqbw.us-east-1.rds.amazonaws.com:3306" #("TLS_REQCERT demand

Remove the last line TLS_REQCERT demand and replace with:
TLS_CHECKPEER no
TLS_REQCERT never
" 0 11 (fontified t face font-lock-variable-name-face) 11 20 (fontified t) 20 26 (fontified t face font-lock-variable-name-face) 26 78 (fontified t) 78 91 (fontified t face font-lock-variable-name-face) 91 95 (fontified t) 95 106 (fontified t face font-lock-variable-name-face) 106 113 (fontified t)) #("#
# LDAP Defaults
#

# See ldap.conf(5) for details
# This file should be world readable but not world writable.

#BASE	dc=example,dc=com
#URI	ldap://ldap.example.com ldap://ldap-master.example.com:666

#SIZELIMIT	12
#TIMELIMIT	15
#DEREF		never
TLS_REQCERT	demand

" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-face fontified t) 2 4 (face font-lock-comment-delimiter-face fontified t) 4 18 (face font-lock-comment-face fontified t) 18 19 (face font-lock-comment-delimiter-face fontified t) 19 20 (face font-lock-comment-face fontified t) 20 21 (fontified t) 21 23 (face font-lock-comment-delimiter-face fontified t) 23 52 (face font-lock-comment-face fontified t) 52 54 (face font-lock-comment-delimiter-face fontified t) 54 113 (face font-lock-comment-face fontified t) 113 114 (fontified t) 114 115 (face font-lock-comment-delimiter-face fontified t) 115 138 (face font-lock-comment-face fontified t) 138 139 (face font-lock-comment-delimiter-face fontified t) 139 202 (face font-lock-comment-face fontified t) 202 203 (fontified t) 203 204 (face font-lock-comment-delimiter-face fontified t) 204 217 (face font-lock-comment-face fontified t) 217 218 (face font-lock-comment-delimiter-face fontified t) 218 231 (face font-lock-comment-face fontified t) 231 232 (face font-lock-comment-delimiter-face fontified t) 232 245 (face font-lock-comment-face fontified t) 245 256 (face font-lock-variable-name-face fontified t) 256 265 (fontified t)) #("sdfasdfasdf" 0 11 (fontified t)) "54.88.217.221 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpKtdmrQ33kNWWAvxOz56ztMaXgpb+zmSZjnMrPD5Mp+ZeKV76q90mlRO+JoXwQuQ8RKWoUDPUltkzAd45czPxNRkRQYhVTAU4prjrkkPDPGog7j0V++3t5kgEw0QBegnAyDw5mm4iu5h6heArN78zbgiRUKI87dNNrg82aiKJs2lVWpFHj3B02j/wQ7RI6yOqMRiEHVz/d+xz/bzU+uKGH4bW6iF6XU7PFjaNDYbxi6zplvSasVfmueaLnGCBEX0aKuxJYm9Dwo1dBDbm0s2qZBuj3RQfDv/OlLtMikmS19vAOrhdJWBbB1dqo3vFbgTuh2JpYwQtB8XszeImNHRz
54.68.251.87 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDClNH/E19hSMlQdJEv3XmXVgoTVJ4QkS0CXWW4Uk6atQSG/vnjWJb1dTmNQFYQ/l8v68S26pmEoQ/EzRjpGrNgf9mFNW8VBrl+DgWCvxFEtBIsvdtAinQlqBCVhRJQZBvlyeVdgzgUObZPUkOPICI7t7RRO7FplgNywqY3IF4le1Q9fvTCFjBN+aiHRgV3/VygQ1HJdl0I2IUlPUX1LUOv0oyRkDRw3vgHtc3TE+Z87c+JdiLAOGSV5lHpFqTK6s0ie2Kn710Inm3sb2BtGhowVSPOEGDa00KpBmTzoIhkw31VlSf3yZxdCXX30SlMy7DDetqhRa1mBW+syv3cVs2z
bitbucket.org,131.103.20.167 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
131.103.20.168 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
update.systechcitadel.com,107.23.211.157 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCimyTWcmFX4AMHjOMtbLXZ2WuVGeBcaKmFjcAlzhYhlgxFXZqL3NI0Yt0FzK6udkizPGVGLQ5Lcxd/69JBN0+O8GW/46WiqDwGjgM7IJ3S1ykHgvCLYbqRFpldnPUZfxvnLhYeJR1VVcQcd/rY0yTzXoimhcYTA98ElRZemMQMvDdfnxTS4MJjQv9LcTrE8+icesL5B7O/1cIiskWCgpnISSoP/rmYVq+P5v1t9nDSh50d9/HFesfuo8cp3oFlHDGYcN0wQVqUzBa5QVSddJvV5R2VRoK8yOfoucqRe13UNqQ7UpUYWwsw+17wtYweFFKWbWsLClqUvAXGx20YNSSJ
pm-efp2.systechcitadel.com,54.84.148.240 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDRsJ/jO4z27jooQa74p785uCrCcMpWtbGT3dwEl/NZDZC2J2MUv1NhEOWoK6Tfge4UjZUYNBlBBBc8Ap7hZ7t0l56v/5Rj0jkKaPZSWIb3xJq3tzqn6LPZzvbW1IhCnb2c2zObA2PMWCI5nLbb0PeKD4i07go9jsFMwmF3NPDtXtnQ+z3uWm9HWe3hEcGXhFWeZIUikRHrFzwyGSM3HSoNmS2DtkNdxbH09f59foAyUQhfhcU1nIWxTFN/HAulPoNWUFiUe4FiPyCpmg3/g7aQIU7oPmpShFKfiOJPfkqJAXlWmLsL7J40mYv3MQig1I72g2B9cf7z2za5NwQpAqXv
" "vvv
efp-dev.systechcitadel.com,54.208.120.123 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDGOV69kWGqEfAEpRxJVzLzEjX0Lk6isC6Eec4Zvi5PF+HlN7Z9QEKZLx6NAME0fiFxvbI9Xc+B2G1GVimO5KX/fRyqYdOWJEaFi/WSWyGrAlBBu2wwC2v5HfbIX4ZPMhlJhPlxiBEjgTDz6CIyPbJHXUaz2H81XHGGtFL8w4IYCQOh/ECiOdzMMcz3nBAXxMyUZjYa31sEOSYVWeuT9ayD9XZiktR0fcm4bVwWMUFwO6aVqNMbRgJVHiz5s8PoEFzJw0Wf4CMfxn7Mj/vxcTn3N1wdYpSDBTPPldFp//wl68muCaLo2jyN33EgvkWS9mh0sybffcTzgaY6i9ejtdnZ
bitbucket.org,131.103.20.168 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
update.systechcitadel.com,107.23.211.157 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCimyTWcmFX4AMHjOMtbLXZ2WuVGeBcaKmFjcAlzhYhlgxFXZqL3NI0Yt0FzK6udkizPGVGLQ5Lcxd/69JBN0+O8GW/46WiqDwGjgM7IJ3S1ykHgvCLYbqRFpldnPUZfxvnLhYeJR1VVcQcd/rY0yTzXoimhcYTA98ElRZemMQMvDdfnxTS4MJjQv9LcTrE8+icesL5B7O/1cIiskWCgpnISSoP/rmYVq+P5v1t9nDSh50d9/HFesfuo8cp3oFlHDGYcN0wQVqUzBa5QVSddJvV5R2VRoK8yOfoucqRe13UNqQ7UpUYWwsw+17wtYweFFKWbWsLClqUvAXGx20YNSSJ
131.103.20.167 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
dscsa.systechcitadel.com,54.225.98.249 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDB+w6slZEPZYGJd/aHXrI3QruAZtxpaEByr8WKT31yBaAaiNc6AdgZKo2FK7y40loMqn5CR/U8bJnYzi5e1kgoJ/Z3TqRknw6FKswZA6qO261wucRvW3yl0DKA19mcqwnf/oJgVJu3Ih3kViRJCbKDMX9uRDdevPxXP6/UtXz/e1W1hnxmFLK3nSPdgEn0fL0yHncVX4ZQM73VrWfQzLT6XoXcIrALJnY8gPoSz1xPq50OpQkAQYI0TioNj/uOrc3ppTGJpLGl39TJo5YA+T0iLLTXS3VEZ9kP7L+NiKHt1SWYw6CKlaqPosoS9MLfOaB5vfKC28elpY+UkHh6ggWd
tjacob.systechcitadel.com,54.86.34.1 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJS6VokEfmpg1X56IWaECZo4hmdSMsRPEtl5qIImMXf7XjUrjP/D4aaGnqCx5dDj07gz0mkJdoDlKpvNvD59yPNIkLW2hO/ecq7bMjmvgLp88g9WJGukITw9Gll4aiWvaPcXytKgRCwkaURxHZbSDT70HX/26hR14chECIeZ2Ny/T9t9OUHKFc6Jh5NFWt5mHshplJOkxgRtlhnw20+P/wmHcwvshMsWQa5C5DNGNwi1Waie82GRivxc1qi+LC2bbE2/LV4l0+NpY4XTu/jaVshVi/FYcEyGdM0CVHyRuPmON4u23fobxEKxIrZEx23ar/kCUhzcJ2xbS9GZuC6ldX
sales.systechcitadel.com,54.85.76.220 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBvMSlejAnzqYoWzB/vom26xP65HqIRiHPRXfuu2pmUcdFtFlv9R/PF4djg+MiOHxDecVX3JOp8SqpKU8l+SSnBJkUtxdi6tSRLAx5/qFJTsfh58DXZjQJ0z6TyspvbloCLRyAszXSvpksdMWaJZu+KMZM33EDhD7QQNJyphCCeDatJkah62saGsWR+eQjBm39aMN1ZlMINV+PR3Z49EpubR4D+7HCRDPWTShtCq2F3VyOeTJM6RsJUdIZUncdcigWG1FRkw4LJjlEW5mdXufC8bNe6y/6bDcue11Upzn9+mW2ThBcKXpcR2hbVe/w4cgFf/hTjahQ8Yvy3bKgr71p
demo.systechcitadel.com,54.84.8.242 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDp95ig93zCh795zxfeyRoIG4a9DFWaMuH3LeF4srEJRH9UJRxFczTRIn0v810QUn+LW0+sltCk+JymXAONss3jsJwuk552losNoNUWNZJUZiioW7DjmRSU/MTcg9Acaq/hyhOOOom2AOSjQRLIP7851zwV2E7wT3617hSNW8ujaIINMrhicNenmWvWw6hRVFswYn2TaGi2j/Pqnh5bHBuZYIJ1xAqBpuhofQiysS5Gj/tgCjRkBg9Z/TLyCfCrP7exNQ9T/6d1Aw/0sbn34qTmFw4lltgLK2uV0Kfvlg84XsB//rBf7SVRV8zGnd5Dgwm/EMBnKoKf+lJgrMaDbTf
pm-efp.systechcitadel.com,23.21.160.154 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8gO8vqObsqh64MWtletqprrhJy+c1RUCm4T66O1H8PG3qtKH3WsEs2lqD6PF7TGtgdPAQcWtxtH5rvb/nhuZPIZ+NGrseSHUBC0fhw5Oq8HsJ1VHLOvU1P2so/0UJ+yCK+mwFAfTvCz6eBEbX6jewNagJ/MK2S4KA3KDQ6gRFmi8XRv7Up3+2Z3dFVs6OpKUmI97QFF64stA0CYncTtTe0mLAFo/+f0bAl519P97TlwWgxLDpABlf3O5JFT167esIHhJr7XNf1YBSVO1xmsPgWqZ4j2h8EPuVztrzgSNIc963eVAfD2WDLWcmH1yE4l7/DYWscMGV+xuAFCpCrUwP
sandbox-printronix.systechcitadel.com,54.225.87.164 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDerYGweh0NChNVjS0FvasC/KcjYYL12qsIyJ/9plPHxq6bBhfw0gc2Uq/effiJOAyI2DN8iK4MGbbAS71lO/6LX21INHlq2CeiLwY6wQO2+fjgabsEnwv6rV15z65mmX/hGqvFGTsQiz8SHYgGpV6fhA+zON+ut9+Z0BnrG6ijet6JbZerY04WlFIDFMosReXkKZZ4hRYwPDOXnLowNhh/hpRkAsCSi5qkvrS2TGRQLWwBnNZ4F2EthZvH5wAwrZ8kMLeO4CbFhG6GcY6lPNt/lmylppFZS5IXcqtuWmLpMMk/hLXhVyWdKEB7ASABPflBQti1x9+BoUOcCLcRCRLl
squareone.systechcitadel.com,54.84.227.92 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZfuXp87b0ODI+pHmk2xcGiOWzuh4/No7h+NTi+FQutLVaehyDnU9iMlKh1pX/dSPI8VcBnbedmwvKA0qYZ6GnRmUP2x/5777U20GagPh5BgIg6xJUISumxUbibIvUyVzRIXsIrTcT1wwAMpyrBLizC6ANJPePDSJISA2CqVFM7z1REPRiPHRSw5IbHyOyeaxNVBJrt14jU5+cJN0DDzdIru8c/kJrV7TDbuj7QsypSyAMkQvEY7UrW0y36KdmptNudoDcRjxDlABTbB8y6EYIuugIO8XvNHv/ifK5UcROoeaANSPVD5blAaFeEu9+EFUcWZUhQ0havaU41VE+8pH7
54.210.81.236 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDYB7vSpIfCWBE6Ru4oqCO8vTvgq+auBJDXaWrAzGtuOHH9bBHEeLoZ5uRvU6eomO6Q1BqmBDICAZi5y2j0gGTN/qxmTINaoi705fSycCNVDsToyoPK7RtsoWWeWB6oFG9O0rRNBp+Nr/K123lcGDgtAaUaqjiqerjfOjUTF9cPFR2L4rM/LxjMLXIDFDcGhFnWSx20E3CGrzDSyX8+gpXcOLn9uUIh03F66/3seef/lgFfX8CVtfKBzH4CniT421/ro1FtJhldhfnGWZOTRiwdk5vJL2woykfAmvhGK1RLIGsrfIuryVp00TeawSkpKktTpgr0h4V1W5KgBDkpb0D/
54.210.8.107 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0qbqHJvH4CVys02HXxbR/Y+ICdSsSpbu9/XKogFmwj8x1EckoyafqfjSqdb2d35l55AAgRx4YkLQ2LXhTr/VlsMoPbWGQoKZTL7i7XdAad7HrEz41DyVZlzSWIZq72KuWM8Ee8985zSj/U2DapOYuybmwXDscYZhN9gKxAasCbbByqBtyGf6Z8TwTiRyJV2i4P2oEaHOBhuy+I/0HqWFKQ7Yh9COllCfCnQLDf72fhG3ggh8x1jvmqfgNcKuPzHboaVMAfzIm69oMFQluh5Ab2rHog9aZC9PfI0Iqn9S20gFfaU287d8aGbtIvvDj2m07jE5Ke+r2T9YMeAbpcNH/
test-corden.systechcitadel.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0qbqHJvH4CVys02HXxbR/Y+ICdSsSpbu9/XKogFmwj8x1EckoyafqfjSqdb2d35l55AAgRx4YkLQ2LXhTr/VlsMoPbWGQoKZTL7i7XdAad7HrEz41DyVZlzSWIZq72KuWM8Ee8985zSj/U2DapOYuybmwXDscYZhN9gKxAasCbbByqBtyGf6Z8TwTiRyJV2i4P2oEaHOBhuy+I/0HqWFKQ7Yh9COllCfCnQLDf72fhG3ggh8x1jvmqfgNcKuPzHboaVMAfzIm69oMFQluh5Ab2rHog9aZC9PfI0Iqn9S20gFfaU287d8aGbtIvvDj2m07jE5Ke+r2T9YMeAbpcNH/
sandbox-sharp.systechcitadel.com,54.236.208.12 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSIDzXuMr3buq4+A0IgPjzj0MDZYKnA4mwZTHIQ56z9gNjHy09eG1bQq1MvWWTbkPKX1ps1s4b2YHQ5TBbcDjaZYBoNQNI6ovjZ+Il9xZlAguG9wHsSLOxcHv4KygScvowsuz910O8DU+dAr+lsRRzXny000fbPuEr2u+yEapcFY0zqeb/gga1088hltN7VN971+vzCpYxwHiSfCNOmLMuKE5yPoDZx2KYRV5UDuf3eQL7hLQxoW5qkbRtPU0wZCcmL7rxB8K8FUdOZiBPQ54qMiEOH54hHohs/ORlCpTKvkFV/7nNsUpHFQmJm7h91nwT/y8O1RLWhcukJ8BxQPmx
54.210.168.127 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs1cfKDN14g8SCZNIt3OI2jJROhSSFspezkWFR5RTvexSyeZuzjaAUBy81FQkc5U8m3PiD6S5ZZfQvo0u22lQtdIlxbULOv8HNdDLYwA4b4VW8ggd/57gd2Mk2yFwM/Q9xlVzlGwRz1BJhdab0EXoH0v5AKIZp3Gyc9I1AVbCSmjr+XYa9IjkFnlvQOq+EldSHFHEV7mEfBxp9ettWOmaJtLRr7lkdBWGLkDbg1WzumBYJ3eST7ihdwL8bpoXVTh722Mif3K0WYcgQ2fcqzxhdCiFxlaNxwYG0Tl+RDv2tFa0Y1HMuNP/khKJ2cg6zHjzHhalcyP3z9OWSNSPiFj3r
nedroc.systechcitadel.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCs1cfKDN14g8SCZNIt3OI2jJROhSSFspezkWFR5RTvexSyeZuzjaAUBy81FQkc5U8m3PiD6S5ZZfQvo0u22lQtdIlxbULOv8HNdDLYwA4b4VW8ggd/57gd2Mk2yFwM/Q9xlVzlGwRz1BJhdab0EXoH0v5AKIZp3Gyc9I1AVbCSmjr+XYa9IjkFnlvQOq+EldSHFHEV7mEfBxp9ettWOmaJtLRr7lkdBWGLkDbg1WzumBYJ3eST7ihdwL8bpoXVTh722Mif3K0WYcgQ2fcqzxhdCiFxlaNxwYG0Tl+RDv2tFa0Y1HMuNP/khKJ2cg6zHjzHhalcyP3z9OWSNSPiFj3r
printronix.systechcitadel.com,54.86.93.120 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDOEYqPCU0b+EsjfEfoIgdityCpAmO9UMaiSNbGhtjHN9LBUX0JXHtHVIsgHq4LKjGg3C9BJO1xC9FlFNvvzerNsokauSncTeUmxxTKKotX7VuhgUtqVZc6KGfVwrAUw++9bj7mvbdxOKv4Yrxa7xvONK4zP06BNsl9AxMSM/Fn2RRpTLaJEhN9tCTCQL/uZ83+utRqsQiCl2+VeotqzOK4AmE3c2M+hVlH34f3zOSA1SmnO4T5XbSjIDb3pRZZK7uQmCdF5+b81EA0VajJYjHm8Fq6RBa/cJSr5NRzggdjBmeF/ge6B+A16UHmXOGHY5flwhSLsPgMsyT3pbqRJ/WB
pm-efp2.systechcitadel.com,54.84.148.240 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDRsJ/jO4z27jooQa74p785uCrCcMpWtbGT3dwEl/NZDZC2J2MUv1NhEOWoK6Tfge4UjZUYNBlBBBc8Ap7hZ7t0l56v/5Rj0jkKaPZSWIb3xJq3tzqn6LPZzvbW1IhCnb2c2zObA2PMWCI5nLbb0PeKD4i07go9jsFMwmF3NPDtXtnQ+z3uWm9HWe3hEcGXhFWeZIUikRHrFzwyGSM3HSoNmS2DtkNdxbH09f59foAyUQhfhcU1nIWxTFN/HAulPoNWUFiUe4FiPyCpmg3/g7aQIU7oPmpShFKfiOJPfkqJAXlWmLsL7J40mYv3MQig1I72g2B9cf7z2za5NwQpAqXv
54.210.206.14 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1OiKwEmvbRAOwsTYWf37lMPFCMzikXFfqgqYWLtOr35U+nr2yMIQlTWD1EAVTaiS6iLbrqTcmVs66O9xM4VbCMltHwfC7gm0ny/dLh7/PF710Sp/02E9jcJsJXMv+By7PhCpBDGuMkTc+ALJ23TIYFy4YSjbozwBo2P5ck1bhLc/iRlTh193jdoQprmE/qi1AOa9jKoZIvvSZeXVUQePXtPx+2KLJB3aP4kJcUKUbn3OWOxhIACT6txJ9IcZc9ejz1fugItfTM7p5gRsq481M+UHbi6iGOIAPlVlal+4Z2bmFHCUIMif74BHfx9dhl0iPkm8JfoxgRwEIBe4Go/ih
54.86.146.208 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzh7VI8X+41M3sVrX/MLlBcQWZZie7OIQjrQhv0dbaGqIvRzftEWaBMEhsxxcEwUIT7EQUujvWxHl7lkw4NzstnHXx5VdTdioSar4fMssNSF1FObusS63ATZ81qCw1Yaf9V3+L8oTTEmqlOBSGwWJuOt+xtDL8IkH/JiheER080aHXzI7E1QMiDbG9YczkF1+RUMHKQng+b7vtUfdRkSr5cFyRaLL8scI4Umd6ukilbk6ezhf5PcS85e5O2AoNVhn/zgiPbjMtqC0pZpVKjievEhoJrXO7o6e+O/HxB0TRpEsbCL4E05oIGOX43dNItKIkZvUsSHkr8WIuL7KTx3hF
vpn.systechcitadel.com,54.236.208.25 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVfNsEfVDl8Nc2gcaAWDYk6XN2OrYeCXIKBOY//QZzJRhCE2QN0nAeIwU5UPbcs2WOfbkfS23mwEesvHI8szn6gfyojHhU/hgmm7Dt6YQAFB7vXabGFn+KbPo2TB74ik9rr8cipEgCm3tSwp58yNXn1MG7mvUj+AOgAm+i5MYoVmgam0GmFCK/Nue0krrO8P8dhHdXnQlLDlUMkdslhaN/3dFdcgI8pTpIOuBpBbkta5B/eFo/Dhzc0Tyk0VNL9mK7GaHcJxqGmTPON5WrYkLQ/Ckbns/O1PLvDqLcSQ0IrBkrF3mKbiZWbQ61QI2PW6hnvkR3N3TJ7tX7GLIpvmtB
54.210.177.202 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9skXLn2aXa223EMs7evoA1r7VIHn3G6oSHvJy3j50OT08eFybNk1DqoMDLOcyCUrQmEWeXEyj1B1DknQl0/1Q+Slu/pXtL3eUl3O48ohVE224re0PZ+1fumJRzsry4nXGUgGu4Vaq7On5sdPQfogeage3AkKXAjG+Vm6Ujf6xOIcZLF8Ihhg3A2H+MGRmbmKdRa1P8RsgbRh6c5TEKq743+DnLF2gHvUaZPeKza1QAlX1fsCELR0PI6xX7dK7CZaWuAbnPBOCdmb/KCPGP0JZn9DCFkZh4LrnY2p/ijj8FHm4BnQhmPUvXWVgdx0PMP0YRIZooEbobhvLuQCbu7Th
na.systechcitadel.com,54.86.49.152 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDjz3OJm56SpwbiXQlnfBfH5ExBVHtqt9PGI6q5stsDp8e47DOqbTmYebSodUUqHQVr2FmsvfJZNo46Szw9x8wiFzl75gM0YHU76mbukAxNQOPo4uTiILvCPLAyYwoRmv7DZal5y9zlEQ6SXsSVuCkJLJYuoBcBzPbCIwsNDMxtefUGgZbQKdZg72lWophDW8QMSAhyiSlvDPhdsZJPEELQr4mnt52EGnp05pJYpAORTq1vUAXuBko5GoDaUDXV9cAPSJMkKH62Ms3Qp4Jy5w5dKuNWU1ncwwEw6FHv8IL2FCrZ96NGwyrOf0iL5QVeJbz35WtoQmOH3cSZtN0Qv5Qh
54.164.36.178 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCl2WrDbO5b+LLt/dp4/qYiU0oUc4E6W3M4cvuPGfxFB77IoXCyNFmQxE9PqudYjSgvCYlooZWBe0+r1XAaEpBkeKXTuS9WEZKA+DkOEgSm1GqV+S+DVpNQSaz+Srl4WaONFYyP0OJ+jMInWrOvASW5Ya8zDUyGPxPo4PgeEB2JZm37/gZBd7y9JSyvDOJox5cajJ/ERBAKdkNlmtk8qM+3QEerhxZg489biC3gKmsrNJcdkNiHfCrir5vrxULHY2yDCnA8BRl7aIt1V2gJC6sC4SwEYYM0IKrRDDikBYLB38z2ND8gxRnkSx0QPW0yNsv+amPI0uVAdDdu6fx3BIaT
54.208.58.84 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDRYcaC3WeDnqSDICGiyllKWoSHcjdJeLBvgmd1RxX+nr4GZIYIX0752GT74qvBgUrcMoiy3XopVbqfjsWoCIGiHGPh24/sJXUXvq6qnUuaSRyAvtIvuEKlSQ43tsbAFgL8RGQE/xO+nSFIjdRq57/ybuKITHnMH8NW6TPPrjlOM8JXbCF+a5JVwCCf5b7KDjco7WAG406rDurKo6jNWK72CUTkFCAAVaP60GLyVXxIZSoAtfV+PbvGZdCRlrYxsxEwFBgGZUxIEy1kaCji+i5Mh01V9K0NDU4fYcYS9u0iYldC+oWKNQxJTikG9y61XE41eU/skGnBbt519EjLpwTR
54.164.162.104 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDi75sR28Zn908BN2qupV4Dw6rREum2pU/KXnbJT2SbrFstFTOSWXSPROPxLHLCLIac97NoOUmrerRSxxq0DupkHLqVTaaZNMQ+Qsg4J6Cn+56nq8+nVhbpg63yUY7IjmAnbiP594GQQ4Ne56KcqtttMzROFfptu1hl3ldpYhsVR1REA4roS4X3DEivZwc9nmsGxfGtuLU+FaXBa09/x32A4JF+t8ll4P5LSI818LFkAU8F8D5WL1Ncp2mht1tgmDlDam/87dOoS/uSK4KYMoAXig5q41mH9hANPOq60uJwS7oYriEhR+ML/TA4hv8TYDGaG5UxIjOjCmomwErN2Qbt
corden.systechcitadel.com,54.208.11.164 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDp8Pe7GWGs38kLOwMcYBEo8CjClQHtfgUq8RT/k6isiRz14/WevaZTsl17HJvltKzIMIj2YKkRao/McLITlQsVHL4Lhjhhbhz8J+cJZ4SNy6SMutrGv+8rKmPOxLGaYNWGjxTXx3JsT1rGbIGikea4lpz+ACAyT2sOjb9hJBtVzXCIq8APYVpa9Qew6fnQe00UmWkQwE4QNiCs8TUxV7+1uDjfYftxULEX5dEuVQmunEsQLExJSrd5oRXOcOSQZB5JYkCaBjZCY42JuKRzJTAS+9GJDWrlLQMlp8t2iEZsEPeA3cjolXNrit0m52M1Fi4yLehPPCnlZU+fc+wIJp9x

54.88.217.221 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9cMbTbx4gKhQ+m2j+Q+nvelrknMokcv2L8nmH+ZFqJeGmJnEP/uWwpqyN6G2uZLNzIe958Opsngh8V0R2q+Gz7W/RtaEgqNRhX6ZdYFa5hxnFr1SqOyJRe2sDz7Rr9uyM0hER+wa73Fcd+4J4pxmGHnSV/oDh1L0dyp/DWrqadc7dVrjRJ240OjaSqOiG5S0BsoOvXc83UbpVAuXHaoJ5BImUYv3cfAx1k5Rw34KlcqpBxaG0LLsOkRB7lEp63zLJSNSvUv/9Ib2EP99ktslpik+876Qfmc0YkO3JnyvXvq6ncdRfBQceQwScnrb+NgVuETu6xu/LCPH30wr7Q/wN
" "54.68.251.87 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/oxhQqy7NFZqXJy748miMiMFU4XEE0dFp5QYx8DMTA4Ob+pj5fY0gSGdeunfANpCPJMBGC1a+KERmpQVBcVx0piro3flgbNkjL3UsJiM4x9Do46IH8QkcWGUpCmP07h51qNcAA9HZCVX7JpW08Lge/euCoSOfhEmyZL9svrBOgZw0SMYIps0ZTMBmSUaBXAnmMglfMguM9ifV9evR9QLQZNKFtneJ/JKGWgdoBOrOmA3iJ0ICp1yJxwag0LHuvSfEBV1Aokb88gCB/hsOhY6UE2ohcCKC5irXB9prCsXVtYV1vsFTo88Hao8cftRrMYaSBH+5JmrkpG5PTB03L/1j

" "54.88.217.221 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9tdMjlNlGr7RnjJ07g+M4q3c6w6VPJcTI2Ma9VBFcVcplMkbF0Cc735LXf2onz171O6dnx65UEMu/Lb3umHkoZ0/e3ocwtcFmwB3FD43YtJkeg+n/EVaHKrl9i1Ldgpks4Di/1R3f848Kr+Y/L6imJWBJXX2dwFVhASbnNYHx3+xtb6xzLcHIGRWtYo9pBX8pS/sVHwyKmqvPZ/OMQr1t1ZeMGabyRJ2Cxi0UEp7+oH75bD82+8YTDC08UcAIoE7kK6YypZNiXRm6JrkKOOOUMx1umbfdGvV99iaSg8sqWPYjk3VnRg3d6VbVCMUEdPMtZo22I49xGUyKb7XR5c9N" #("on`, `parsing_job`.`errorLocation`, `parsing_job`.`archiveServer`, `parsing_job`.`state`, `parsing_job`.`device_id`, `parsing_job`.`remoteHost`, `parsing_job`.`user_id`, `parsing_job`.`format_id`, `parsing_job`.`processCount`, `parsing_job`.`emailUser`, `parsing_job`.`queue_id` FROM `parsing_job` WHERE (`parsing_job`.`queue_id` IS NULL AND `parsing_job`.`state` = 'queued' ) ORDER BY `parsing_job`.`created_on` ASC LIMIT 100" 0 425 (fontified t) 425 426 (fontified t rear-nonsticky t)) "SELECT `parsing_job`.`id`, `parsing_job`.`created_on`, `parsing_job`.`modified_on`, `parsing_job`.`receipt`, `parsing_job`.`received`, `parsing_job`.`inboundLocation`, `parsing_job`.`archiveLocation`, `parsing_job`.`errorLocation`, `parsing_job`.`archiveServer`, `parsing_job`.`state`, `parsing_job`.`device_id`, `parsing_job`.`remoteHost`, `parsing_job`.`user_id`, `parsing_job`.`format_id`, `parsing_job`.`processCount`, `parsing_job`.`emailUser`, `parsing_job`.`queue_id` FROM `parsing_job` WHERE (`parsing_job`.`queue_id` IS NULL AND `parsing_job`.`state` = 'queued' ) ORDER BY `parsing_job`.`created_on` ASC LIMIT 100" "ec2: #############################################################
ec2: -----BEGIN SSH HOST KEY FINGERPRINTS-----
ec2: 1024 d0:f2:79:d7:bd:b1:ac:5b:1c:ab:d7:e8:65:93:16:76  root@ip-10-1-0-88 (DSA)
ec2: 256 d9:ee:be:f3:42:df:6a:78:8f:e5:d1:84:53:44:54:dc  root@ip-10-1-0-88 (ECDSA)
ec2: 2048 b7:ce:64:c1:10:c9:cc:3f:d1:48:4e:81:ab:d5:e4:d3   (RSA1)
ec2: 2048 45:08:8d:d3:0e:5e:e0:32:52:ea:c8:cd:f5:67:58:64  root@ip-10-1-0-88 (RSA)
ec2: -----END SSH HOST KEY FINGERPRINTS-----
ec2: #############################################################
-----BEGIN SSH HOST KEY KEYS-----
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGmQH9IEIixCmyZZLUHeF8i7OQbBjtunOJB4tmvpzag/1cjYq4beSh23S4pws5IJyRgtI4yEAjO5P+gBq7DNMwQ= root@ip-10-1-0-88
2048 65537 24819789585478746453258100594883110260793921971172551227825660876619563354671726820551577479481968711959005372294037098375645193600349664240127994153791775741720642617247899151754571960645011476246949720977255715676521997003963108216556522168431099680452581125269977981493486120517174845546152519324478670298561256225813300611003464273349154095621495771957161041051111074439527481770523114009585606881219639008333230016426128464167818672471331099730475722883508592426175468973113205668148680379248594413102062579622447655107428807733763182727945321066570923318935699489937915813458515636410595803244222076254371880969 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDehzyA83fu1+NQRYfqeYX8ZjdhsGzokS8diIFRnRgbhDjpPr++FI0pSLZcqpjKeauszLwc4I9YnQn+In/1YlYS8ahqenPomsPMvrSL7PsBugQbOVB3em2jHYoFI7REUzGFhdbyWXE2oIzHDBNQkJpfhwHJ9iTkPNb/P3tXqVhXqiAG5siOY1Z/xRgMcWWRFQ91NUVqnTaRpTtnbs6ikoPB+n7dCDcazZpUWL6WBFgD/3nUsfURuW21DbXeYxSFZYHxHnRLfotYvGvT1ryCg3nsfL4f1K+SZOGKDZX+K+aLvYiIgxytmaG89L440iQtkfPWkjHE9Xx5GP6spsb7no+B root@ip-10-1-0-88
-----END SSH HOST KEY KEYS-----

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9l3Gqr5Sef/T3fErdWVsCR9aGw7pxG/8thB3zi9vbofGJdMMav3FCmiZJ6pkbNyQnxPkDCgysv/hEvAFjrNIY1RMyNJwPXxju1lq5Xm9wg4bCgjgxePZyti6i6OOWxY4pvGwuOQPSbctP/5aIc7eTfRgftd0eDcLmjirSag/oNGZpgdZNHoq2Imz3pDzg6CyyacY21UuvTA2XyyCFUHXD9uo4xWrrEXVaeOE3A35vX2W0T1fSQErKfFYt6cYAUkTZ4KX3X85FCLsZSBnmuOPqGxg0DVJ2I4R7ymW00yCUOhzvytqh90G/bO6t/Ebg27gs+jnpT0CzjJTjLGsptKqp systech-dev
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9l3Gqr5Sef/T3fErdWVsCR9aGw7pxG/8thB3zi9vbofGJdMMav3FCmiZJ6pkbNyQnxPkDCgysv/hEvAFjrNIY1RMyNJwPXxju1lq5Xm9wg4bCgjgxePZyti6i6OOWxY4pvGwuOQPSbctP/5aIc7eTfRgftd0eDcLmjirSag/oNGZpgdZNHoq2Imz3pDzg6CyyacY21UuvTA2XyyCFUHXD9uo4xWrrEXVaeOE3A35vX2W0T1fSQErKfFYt6cYAUkTZ4KX3X85FCLsZSBnmuOPqGxg0DVJ2I4R7ymW00yCUOhzvytqh90G/bO6t/Ebg27gs+jnpT0CzjJTjLGsptKqp systech-dev
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAvZdxqq+Unn/093xK3VlbAkfWhsO6cRv/LYQd84vb26HxiXTDGr9xQpomSeqZ
GzckJ8T5AwoMrL/4RLwBY6zSGNUTMjScD18Y7tZauV5vcIOGwoI4MXj2crYuoujjlsWOKbxsLjkD
0m3LT/+WiHO3k30YH7XdHg3C5o4q0moP6DRmaYHWTR6KtiJs96Q84OgssmnGNtVLr0wNl8sghVB1
w/bqOMVq6xF1WnjhNwN+b19ltE9X0kBKynxWLenGAFJE2eCl91/ORQi7GUgZ5rjj6hsYNA1SdiOE
e8pltNMglDoc78raofdBv2zurfxG4Nu4LPo56U9As4yU4yxrKbSqqQIDAQABAoIBAHHhtC84xGbo
qXa3PCj1cYtPJ3dPvoAOtxraDzupuOiWwAU3E7LPZ/L/sRwZRNpqJteUo5bFxJNHxJNU8uiyeIje
BGfV3iAFmW5tZ5WNOhc1ig7wNVzSMgb5k83bYknAZQKA4eJp8PfHZ6an+f4AtDZtn738edOBpJ7k
qqg1eVSajAElonKgeKjB4Nb7yFhn4wERv9S0NxMYmc95lRDhwrTcXKB2xtjm1UnNp1QqBWkAQrVU
aHbz3E9MNyM1RS4ymgMzpCKT3r0gct1X5+XdSSiCgoXd6TF3KLsWVxY+wOIEvDo3oSHri5/MvLiI
S2SCQQMGtA7MpXD/RR8lF/3S0+ECgYEA6a3N5V4k29n6Rw8OxgAh2wmjzaNtp69ivDgpl4Pb2X8Y
+PXMfAP7l5OfDO8LdiiKk5fpKtwlqqlpzbrWqQoRUKhxCMGcdEbXUN9n2T2Bc74kitAg4XyoCuur
czqGRMLiCTMGnYnl3LAf3dzGuz+VkhV8+WVyhNEpPYSStjE1m8UCgYEAz7OQOpk+7rL9JwIpsyW0
rGjyf4mjDdx1cLEeU12FSXfEHZTI8ewU9GPrhfI/5OFcCNftcN7fdyBT34DfHK3jkYD1NF20dsTh
Vg4Nos6QAN3Psjv6mR2VyPbCKQI6f+lKdUOnfH0pCvvDcbsUQAvIndgSuYBikMwamN2kn+u4DZUC
gYEAzZe5GyBlVXjGllZNLS9Ymho1H+u1wl6wg+D11vSQLR+BnSjFLCdk58tdmEeI0gCBS7HP14Gx
MiGzkOndiwPskAZizM1rFXJuZhzohV1z051rESZkh37hahpG0i6fi0fbDzTxkRGOR0g+ATkJMB2V
Pt3hApua0fgkTJejbOCGxfECgYAYfESug85leXhaluivk+xevuiHnIQ6aBj4NgkrLsU9yf62tgmS
a5B01yq22b4qj164NCxrt/qEIq2AlcK3sNA5IQjHKZzSu5cM/A8jeFKFp6CKlIOQdWppDJ4LE5Yt
6iS6+kTOajribpe12qYifsEhyo06jSYRh95C0y5LJBDImQKBgGcF+X0wLBrwQ63PXziW5hEU5moq
yg3GYYTrgmpaMnOnow1vlwKK0+X/b3aF0dhtuRhU8azfFnxRd8MnLkWJxS3h4rxxSK5B93tVfNvT
nEXo7Kw6n2KRVX/foalS4S0kochO7pPQeS9SRgFwhgnXwp8fFkOx+SfFpFlyuf9sDzBa
-----END RSA PRIVATE KEY-----
Cloud-init v. 0.7.2 finished at Tue, 16 Sep 2014 18:18:55 +0000. Datasource DataSourceEc2.  Up 88.43 seconds

PuTTY-User-Key-File-2: ssh-rsa
Encryption: none
Comment: imported-openssh-key
Public-Lines: 6
AAAAB3NzaC1yc2EAAAADAQABAAABAQC9l3Gqr5Sef/T3fErdWVsCR9aGw7pxG/8t
hB3zi9vbofGJdMMav3FCmiZJ6pkbNyQnxPkDCgysv/hEvAFjrNIY1RMyNJwPXxju
1lq5Xm9wg4bCgjgxePZyti6i6OOWxY4pvGwuOQPSbctP/5aIc7eTfRgftd0eDcLm
jirSag/oNGZpgdZNHoq2Imz3pDzg6CyyacY21UuvTA2XyyCFUHXD9uo4xWrrEXVa
eOE3A35vX2W0T1fSQErKfFYt6cYAUkTZ4KX3X85FCLsZSBnmuOPqGxg0DVJ2I4R7
ymW00yCUOhzvytqh90G/bO6t/Ebg27gs+jnpT0CzjJTjLGsptKqp
Private-Lines: 14
AAABAHHhtC84xGboqXa3PCj1cYtPJ3dPvoAOtxraDzupuOiWwAU3E7LPZ/L/sRwZ
RNpqJteUo5bFxJNHxJNU8uiyeIjeBGfV3iAFmW5tZ5WNOhc1ig7wNVzSMgb5k83b
YknAZQKA4eJp8PfHZ6an+f4AtDZtn738edOBpJ7kqqg1eVSajAElonKgeKjB4Nb7
yFhn4wERv9S0NxMYmc95lRDhwrTcXKB2xtjm1UnNp1QqBWkAQrVUaHbz3E9MNyM1
RS4ymgMzpCKT3r0gct1X5+XdSSiCgoXd6TF3KLsWVxY+wOIEvDo3oSHri5/MvLiI
S2SCQQMGtA7MpXD/RR8lF/3S0+EAAACBAOmtzeVeJNvZ+kcPDsYAIdsJo82jbaev
Yrw4KZeD29l/GPj1zHwD+5eTnwzvC3YoipOX6SrcJaqpac261qkKEVCocQjBnHRG
11DfZ9k9gXO+JIrQIOF8qArrq3M6hkTC4gkzBp2J5dywH93cxrs/lZIVfPllcoTR
KT2EkrYxNZvFAAAAgQDPs5A6mT7usv0nAimzJbSsaPJ/iaMN3HVwsR5TXYVJd8Qd
lMjx7BT0Y+uF8j/k4VwI1+1w3t93IFPfgN8creORgPU0XbR2xOFWDg2izpAA3c+y
O/qZHZXI9sIpAjp/6Up1Q6d8fSkK+8NxuxRAC8id2BK5gGKQzBqY3aSf67gNlQAA
AIBnBfl9MCwa8EOtz184luYRFOZqKsoNxmGE64JqWjJzp6MNb5cCitPl/292hdHY
bbkYVPGs3xZ8UXfDJy5FicUt4eK8cUiuQfd7VXzb05xF6OysOp9ikVV/36GpUuEt
JKHITu6T0HkvUkYBcIYJ18KfHxZDsfknxaRZcrn/bA8wWg==
Private-MAC: 19c932d4b9b346189ad2d738bb89d68409ca657c
PuTTY-User-Key-File-2: ssh-rsa
Encryption: none
Comment: imported-openssh-key
Public-Lines: 6
AAAAB3NzaC1yc2EAAAADAQABAAABAQC9l3Gqr5Sef/T3fErdWVsCR9aGw7pxG/8t
hB3zi9vbofGJdMMav3FCmiZJ6pkbNyQnxPkDCgysv/hEvAFjrNIY1RMyNJwPXxju
1lq5Xm9wg4bCgjgxePZyti6i6OOWxY4pvGwuOQPSbctP/5aIc7eTfRgftd0eDcLm
jirSag/oNGZpgdZNHoq2Imz3pDzg6CyyacY21UuvTA2XyyCFUHXD9uo4xWrrEXVa
eOE3A35vX2W0T1fSQErKfFYt6cYAUkTZ4KX3X85FCLsZSBnmuOPqGxg0DVJ2I4R7
ymW00yCUOhzvytqh90G/bO6t/Ebg27gs+jnpT0CzjJTjLGsptKqp
Private-Lines: 14
AAABAHHhtC84xGboqXa3PCj1cYtPJ3dPvoAOtxraDzupuOiWwAU3E7LPZ/L/sRwZ
RNpqJteUo5bFxJNHxJNU8uiyeIjeBGfV3iAFmW5tZ5WNOhc1ig7wNVzSMgb5k83b
YknAZQKA4eJp8PfHZ6an+f4AtDZtn738edOBpJ7kqqg1eVSajAElonKgeKjB4Nb7
yFhn4wERv9S0NxMYmc95lRDhwrTcXKB2xtjm1UnNp1QqBWkAQrVUaHbz3E9MNyM1
RS4ymgMzpCKT3r0gct1X5+XdSSiCgoXd6TF3KLsWVxY+wOIEvDo3oSHri5/MvLiI
S2SCQQMGtA7MpXD/RR8lF/3S0+EAAACBAOmtzeVeJNvZ+kcPDsYAIdsJo82jbaev
Yrw4KZeD29l/GPj1zHwD+5eTnwzvC3YoipOX6SrcJaqpac261qkKEVCocQjBnHRG
11DfZ9k9gXO+JIrQIOF8qArrq3M6hkTC4gkzBp2J5dywH93cxrs/lZIVfPllcoTR
KT2EkrYxNZvFAAAAgQDPs5A6mT7usv0nAimzJbSsaPJ/iaMN3HVwsR5TXYVJd8Qd
lMjx7BT0Y+uF8j/k4VwI1+1w3t93IFPfgN8creORgPU0XbR2xOFWDg2izpAA3c+y
O/qZHZXI9sIpAjp/6Up1Q6d8fSkK+8NxuxRAC8id2BK5gGKQzBqY3aSf67gNlQAA
AIBnBfl9MCwa8EOtz184luYRFOZqKsoNxmGE64JqWjJzp6MNb5cCitPl/292hdHY
bbkYVPGs3xZ8UXfDJy5FicUt4eK8cUiuQfd7VXzb05xF6OysOp9ikVV/36GpUuEt
JKHITu6T0HkvUkYBcIYJ18KfHxZDsfknxaRZcrn/bA8wWg==
Private-MAC: 19c932d4b9b346189ad2d738bb89d68409ca657c

Amazon Linux AMI release 2014.03
Kernel 3.10.42-52.145.amzn1.x86_64 on an x86_64

ip-10-1-0-88 login: PuTTY-User-Key-File-2: ssh-rsa
Encryption: none
Comment: imported-openssh-key
Public-Lines: 6
AAAAB3NzaC1yc2EAAAADAQABAAABAQC9l3Gqr5Sef/T3fErdWVsCR9aGw7pxG/8t
hB3zi9vbofGJdMMav3FCmiZJ6pkbNyQnxPkDCgysv/hEvAFjrNIY1RMyNJwPXxju
1lq5Xm9wg4bCgjgxePZyti6i6OOWxY4pvGwuOQPSbctP/5aIc7eTfRgftd0eDcLm
jirSag/oNGZpgdZNHoq2Imz3pDzg6CyyacY21UuvTA2XyyCFUHXD9uo4xWrrEXVa
eOE3A35vX2W0T1fSQErKfFYt6cYAUkTZ4KX3X85FCLsZSBnmuOPqGxg0DVJ2I4R7
ymW00yCUOhzvytqh90G/bO6t/Ebg27gs+jnpT0CzjJTjLGsptKqp
Private-Lines: 14
AAABAHHhtC84xGboqXa3PCj1cYtPJ3dPvoAOtxraDzupuOiWwAU3E7LPZ/L/sRwZ
RNpqJteUo5bFxJNHxJNU8uiyeIjeBGfV3iAFmW5tZ5WNOhc1ig7wNVzSMgb5k83b
YknAZQKA4eJp8PfHZ6an+f4AtDZtn738edOBpJ7kqqg1eVSajAElonKgeKjB4Nb7
yFhn4wERv9S0NxMYmc95lRDhwrTcXKB2xtjm1UnNp1QqBWkAQrVUaHbz3E9MNyM1
RS4ymgMzpCKT3r0gct1X5+XdSSiCgoXd6TF3KLsWVxY+wOIEvDo3oSHri5/MvLiI
S2SCQQMGtA7MpXD/RR8lF/3S0+EAAACBAOmtzeVeJNvZ+kcPDsYAIdsJo82jbaev
Yrw4KZeD29l/GPj1zHwD+5eTnwzvC3YoipOX6SrcJaqpac261qkKEVCocQjBnHRG
11DfZ9k9gXO+JIrQIOF8qArrq3M6hkTC4gkzBp2J5dywH93cxrs/lZIVfPllcoTR
KT2EkrYxNZvFAAAAgQDPs5A6mT7usv0nAimzJbSsaPJ/iaMN3HVwsR5TXYVJd8Qd
lMjx7BT0Y+uF8j/k4VwI1+1w3t93IFPfgN8creORgPU0XbR2xOFWDg2izpAA3c+y
O/qZHZXI9sIpAjp/6Up1Q6d8fSkK+8NxuxRAC8id2BK5gGKQzBqY3aSf67gNlQAA
AIBnBfl9MCwa8EOtz184luYRFOZqKsoNxmGE64JqWjJzp6MNb5cCitPl/292hdHY
bbkYVPGs3xZ8UXfDJy5FicUt4eK8cUiuQfd7VXzb05xF6OysOp9ikVV/36GpUuEt
JKHITu6T0HkvUkYBcIYJ18KfHxZDsfknxaRZcrn/bA8wWg==
Private-MAC: 19c932d4b9b346189ad2d738bb89d68409ca657c
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAvZdxqq+Unn/093xK3VlbAkfWhsO6cRv/LYQd84vb26HxiXTDGr9xQpomSeqZ
GzckJ8T5AwoMrL/4RLwBY6zSGNUTMjScD18Y7tZauV5vcIOGwoI4MXj2crYuoujjlsWOKbxsLjkD
0m3LT/+WiHO3k30YH7XdHg3C5o4q0moP6DRmaYHWTR6KtiJs96Q84OgssmnGNtVLr0wNl8sghVB1
w/bqOMVq6xF1WnjhNwN+b19ltE9X0kBKynxWLenGAFJE2eCl91/ORQi7GUgZ5rjj6hsYNA1SdiOE
e8pltNMglDoc78raofdBv2zurfxG4Nu4LPo56U9As4yU4yxrKbSqqQIDAQABAoIBAHHhtC84xGbo
qXa3PCj1cYtPJ3dPvoAOtxraDzupuOiWwAU3E7LPZ/L/sRwZRNpqJteUo5bFxJNHxJNU8uiyeIje
BGfV3iAFmW5tZ5WNOhc1ig7wNVzSMgb5k83bYknAZQKA4eJp8PfHZ6an+f4AtDZtn738edOBpJ7k
qqg1eVSajAElonKgeKjB4Nb7yFhn4wERv9S0NxMYmc95lRDhwrTcXKB2xtjm1UnNp1QqBWkAQrVU
aHbz3E9MNyM1RS4ymgMzpCKT3r0gct1X5+XdSSiCgoXd6TF3KLsWVxY+wOIEvDo3oSHri5/MvLiI
S2SCQQMGtA7MpXD/RR8lF/3S0+ECgYEA6a3N5V4k29n6Rw8OxgAh2wmjzaNtp69ivDgpl4Pb2X8Y
+PXMfAP7l5OfDO8LdiiKk5fpKtwlqqlpzbrWqQoRUKhxCMGcdEbXUN9n2T2Bc74kitAg4XyoCuur
czqGRMLiCTMGnYnl3LAf3dzGuz+VkhV8+WVyhNEpPYSStjE1m8UCgYEAz7OQOpk+7rL9JwIpsyW0
rGjyf4mjDdx1cLEeU12FSXfEHZTI8ewU9GPrhfI/5OFcCNftcN7fdyBT34DfHK3jkYD1NF20dsTh
Vg4Nos6QAN3Psjv6mR2VyPbCKQI6f+lKdUOnfH0pCvvDcbsUQAvIndgSuYBikMwamN2kn+u4DZUC
gYEAzZe5GyBlVXjGllZNLS9Ymho1H+u1wl6wg+D11vSQLR+BnSjFLCdk58tdmEeI0gCBS7HP14Gx
MiGzkOndiwPskAZizM1rFXJuZhzohV1z051rESZkh37hahpG0i6fi0fbDzTxkRGOR0g+ATkJMB2V
Pt3hApua0fgkTJejbOCGxfECgYAYfESug85leXhaluivk+xevuiHnIQ6aBj4NgkrLsU9yf62tgmS
a5B01yq22b4qj164NCxrt/qEIq2AlcK3sNA5IQjHKZzSu5cM/A8jeFKFp6CKlIOQdWppDJ4LE5Yt
6iS6+kTOajribpe12qYifsEhyo06jSYRh95C0y5LJBDImQKBgGcF+X0wLBrwQ63PXziW5hEU5moq
yg3GYYTrgmpaMnOnow1vlwKK0+X/b3aF0dhtuRhU8azfFnxRd8MnLkWJxS3h4rxxSK5B93tVfNvT
nEXo7Kw6n2KRVX/foalS4S0kochO7pPQeS9SRgFwhgnXwp8fFkOx+SfFpFlyuf9sDzBa
-----END RSA PRIVATE KEY-----" "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9l3Gqr5Sef/T3fErdWVsCR9aGw7pxG/8thB3zi9vbofGJdMMav3FCmiZJ6pkbNyQnxPkDCgysv/hEvAFjrNIY1RMyNJwPXxju1lq5Xm9wg4bCgjgxePZyti6i6OOWxY4pvGwuOQPSbctP/5aIc7eTfRgftd0eDcLmjirSag/oNGZpgdZNHoq2Imz3pDzg6CyyacY21UuvTA2XyyCFUHXD9uo4xWrrEXVaeOE3A35vX2W0T1fSQErKfFYt6cYAUkTZ4KX3X85FCLsZSBnmuOPqGxg0DVJ2I4R7ymW00yCUOhzvytqh90G/bO6t/Ebg27gs+jnpT0CzjJTjLGsptKqp systech-dev" "54.68.251.87 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDqwUecepChLs/QMy/eEpt+wviuLU5b4n0PMEiODIG1ip7geslHHYx8McjfuhK3A6kUnDED/uTNKjTW2k5e/kKMEWcjGyBEpKrp1yerbTJM+oWnRm0Pu/sBzOV7C7mNVsdxhAx6WrqBDPpqWXZoamLEVd2X7ozkeuVdcgSXdEiFKtp7IKPGoZW6K6iuEC3OsY9aXH/EJ7wQZEZRHVcfhIJdNbjheacIrnfMZ07TfHdbv3UfnkB0GW22FRAHIzMU3EYgtnV6YHNZY6vbFVpQzafa0LtqAsBtWEBAQxzkHADS4EsGsZKqjaypvZuWb6T9gRMI62LRubuUTRHqBYSC/Rqv" "54.68.251.87 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDehzyA83fu1+NQRYfqeYX8ZjdhsGzokS8diIFRnRgbhDjpPr++FI0pSLZcqpjKeauszLwc4I9YnQn+In/1YlYS8ahqenPomsPMvrSL7PsBugQbOVB3em2jHYoFI7REUzGFhdbyWXE2oIzHDBNQkJpfhwHJ9iTkPNb/P3tXqVhXqiAG5siOY1Z/xRgMcWWRFQ91NUVqnTaRpTtnbs6ikoPB+n7dCDcazZpUWL6WBFgD/3nUsfURuW21DbXeYxSFZYHxHnRLfotYvGvT1ryCg3nsfL4f1K+SZOGKDZX+K+aLvYiIgxytmaG89L440iQtkfPWkjHE9Xx5GP6spsb7no+B" #("export PYTHONPATH=$PYTHONPATH:~/citadel" 0 6 (face font-lock-builtin-face fontified t) 6 7 (fontified t) 7 17 (face font-lock-variable-name-face fontified t) 17 19 (fontified t) 19 29 (face font-lock-variable-name-face fontified t) 29 39 (fontified t)) #("        ;;" 0 8 (fontified t) 8 10 (syntax-multiline t fontified t)) #("    p ) echo \"You entered p.\"" 0 6 (syntax-multiline t fontified t) 6 7 (syntax-multiline t syntax-table (1) fontified t) 7 8 (fontified t) 8 12 (fontified t face font-lock-builtin-face) 12 13 (fontified t) 13 29 (fontified t face font-lock-string-face)) #("        echo \"between 1 and 3.\"
" 0 8 (fontified t) 8 12 (face font-lock-builtin-face fontified t) 12 13 (fontified t) 13 14 (face font-lock-string-face fontified t) 14 30 (face font-lock-string-face fontified t) 30 31 (face font-lock-string-face fontified t) 31 32 (fontified t)) #("    3 ) echo \"You entered three.\"

" 0 6 (syntax-multiline t fontified t) 6 7 (syntax-multiline t syntax-table (1) fontified t) 7 8 (fontified t) 8 12 (fontified t face font-lock-builtin-face) 12 13 (fontified t) 13 31 (fontified t face font-lock-string-face) 31 33 (fontified t face font-lock-string-face syntax-multiline t) 33 34 (fontified t syntax-multiline t) 34 35 (syntax-multiline t fontified t)) #("        ;;" 0 8 (fontified t) 8 10 (syntax-multiline t fontified t))))
(setq search-ring '(".emacs" "ibuffer" "django" ".emacs" "tramp" "emmet" "reac" "web-mode" "hosts" "installe" "jedi" "solarized" "sloarized" "cms" "tree" "jedi"))
(setq regexp-search-ring 'nil)
